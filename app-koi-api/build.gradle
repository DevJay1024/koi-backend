
plugins {
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}


configurations {
    asciidoctorExt
}

ext {
    snippetsDir = file('build/generated-snippets')
    asciidocVersion = "2.0.7.RELEASE"
}

dependencies {

    implementation project(':domain')
    implementation project(':core-web')
    implementation project(':commons:common-model')
    implementation project(':commons:common-util')
    testImplementation(testFixtures(project(":domain")))

    //spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //spring rest docs
    asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"

    //mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    //querydsl
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

asciidoctor.doFirst {
    delete file("src/main/resources/static/docs/*")
}

bootJar {
    dependsOn asciidoctor
    copy {
        from "${asciidoctor.outputDir}"
        into 'src/main/resources/static/docs'
    }
}